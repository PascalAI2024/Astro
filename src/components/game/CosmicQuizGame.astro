---
import RankBadge from './RankBadge.astro';
import QuizTimer from './QuizTimer.astro';
import PowerupMenu from './PowerupMenu.astro';

const ranks = [
  { name: 'Cosmic Novice', minScore: 0, icon: 'üå±' },
  { name: 'Star Seeker', minScore: 1000, icon: '‚≠ê' },
  { name: 'Nebula Navigator', minScore: 2500, icon: 'üåå' },
  { name: 'Quantum Pioneer', minScore: 5000, icon: '‚öõÔ∏è' },
  { name: 'Galaxy Guardian', minScore: 10000, icon: 'üå†' },
  { name: 'Cosmic Oracle', minScore: 20000, icon: 'üîÆ' },
  { name: 'Universal Sage', minScore: 50000, icon: 'üåü' }
];

const powerups = [
  {
    id: 'time-dilation',
    name: 'Time Dilation',
    description: 'Adds 15 seconds to the timer',
    icon: '‚åõ',
    cost: 100
  },
  {
    id: 'quantum-hint',
    name: 'Quantum Hint',
    description: 'Eliminates two wrong answers',
    icon: 'üí´',
    cost: 200
  },
  {
    id: 'cosmic-shield',
    name: 'Cosmic Shield',
    description: 'Protects against one wrong answer',
    icon: 'üõ°Ô∏è',
    cost: 300
  }
];

const achievements = [
  {
    id: 'speed-demon',
    name: 'Speed Demon',
    description: 'Answer 5 questions in under 30 seconds',
    icon: '‚ö°'
  },
  {
    id: 'perfect-score',
    name: 'Perfect Oracle',
    description: 'Get a perfect score in expert mode',
    icon: 'üéØ'
  },
  {
    id: 'streak-master',
    name: 'Streak Master',
    description: 'Maintain a 10-question streak',
    icon: 'üî•'
  }
];
---

<div class="max-w-4xl mx-auto">
  <!-- Welcome Screen -->
  <div id="welcome" class="bg-gray-900 rounded-2xl p-8 shadow-xl">
    <div class="text-center mb-12">
      <h2 class="text-3xl font-bold text-white mb-4">Welcome to Cosmic Quiz Arena</h2>
      <p class="text-gray-400 mb-8">Challenge the cosmos and climb the ranks!</p>

      <!-- Player Stats (if returning player) -->
      <div id="player-stats" class="hidden mb-8">
        <div class="flex items-center justify-center gap-4">
          <RankBadge id="player-rank" />
          <div class="text-left">
            <div class="text-cosmic-400">Total Score: <span id="total-score">0</span></div>
            <div class="text-gray-500">Best Streak: <span id="best-streak">0</span></div>
          </div>
        </div>
      </div>

      <!-- Achievement Showcase -->
      <div class="grid grid-cols-3 gap-4 mb-8">
        {achievements.map(achievement => (
          <div class="achievement-badge p-4 bg-gray-800/50 rounded-lg backdrop-blur-sm border border-gray-700/50">
            <div class="text-3xl mb-2">{achievement.icon}</div>
            <div class="text-sm font-medium text-white mb-1">{achievement.name}</div>
            <div class="text-xs text-gray-400">{achievement.description}</div>
          </div>
        ))}
      </div>
    </div>

    <!-- Difficulty Selection -->
    <div class="grid sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
      {[
        {
          id: 'kids',
          name: 'Young Explorer',
          icon: 'üöÄ',
          description: 'Perfect for curious minds just starting their cosmic journey',
          color: 'from-blue-500 to-green-500',
          rewards: '100-200 points per question'
        },
        {
          id: 'beginner',
          name: 'Space Cadet',
          icon: 'üåé',
          description: 'For those with basic astronomy knowledge',
          color: 'from-green-500 to-teal-500',
          rewards: '200-400 points per question'
        },
        {
          id: 'advanced',
          name: 'Cosmic Scholar',
          icon: 'üî≠',
          description: 'For serious astronomy enthusiasts',
          color: 'from-purple-500 to-cosmic-500',
          rewards: '400-800 points per question'
        },
        {
          id: 'expert',
          name: 'PhD Astronomer',
          icon: 'üåå',
          description: 'Expert-level questions for the true masters',
          color: 'from-cosmic-600 to-purple-800',
          rewards: '800-1600 points per question'
        }
      ].map(level => (
        <button 
          class="difficulty-select relative group"
          data-difficulty={level.id}
        >
          <div class="absolute inset-0 bg-gradient-to-br opacity-0 group-hover:opacity-10 rounded-xl transition-all duration-300 {level.color}"></div>
          
          <div class="relative p-6 bg-gray-800/50 rounded-xl border border-gray-700/50 backdrop-blur-sm">
            <div class="text-3xl mb-3">{level.icon}</div>
            <h3 class="text-lg font-bold text-white mb-2">{level.name}</h3>
            <p class="text-sm text-gray-400 mb-4">{level.description}</p>
            <div class="text-xs text-cosmic-400">{level.rewards}</div>
          </div>
        </button>
      ))}
    </div>

    <!-- Rank Progression -->
    <div class="mb-8">
      <h3 class="text-lg font-bold text-white mb-4 text-center">Rank Progression</h3>
      <div class="grid grid-cols-7 gap-2">
        {ranks.map((rank, index) => (
          <div class="relative group">
            <div class="absolute inset-0 bg-gradient-to-br from-cosmic-600/20 to-purple-600/20 rounded-lg opacity-0 group-hover:opacity-100 transition-all duration-300"></div>
            <div class="relative p-3 text-center bg-gray-800/50 rounded-lg backdrop-blur-sm">
              <div class="text-2xl mb-2">{rank.icon}</div>
              <div class="text-xs text-white font-medium truncate">{rank.name}</div>
              <div class="text-xs text-cosmic-400">{rank.minScore.toLocaleString()}+</div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>

  <!-- Game Area -->
  <div id="game" class="hidden">
    <div class="bg-gray-900 rounded-2xl p-8 shadow-xl">
      <!-- Header -->
      <div class="flex items-center justify-between mb-8">
        <div>
          <div class="text-cosmic-400 mb-1">
            Question <span id="question-number">1</span>/10
          </div>
          <div id="difficulty-display" class="text-sm text-gray-400"></div>
        </div>

        <!-- Score and Streak -->
        <div class="flex items-center gap-6">
          <div>
            <div class="text-sm text-gray-400 mb-1">Score</div>
            <div class="text-xl font-bold text-cosmic-400" id="current-score">0</div>
          </div>
          <div>
            <div class="text-sm text-gray-400 mb-1">Streak</div>
            <div class="text-xl font-bold text-purple-400" id="current-streak">0</div>
          </div>
          <QuizTimer />
        </div>
      </div>

      <!-- Powerups -->
      <PowerupMenu powerups={powerups} />
      
      <!-- Question Area -->
      <div class="mb-8">
        <h3 id="question" class="text-xl text-white mb-6"></h3>
        <div id="answers" class="grid grid-cols-1 sm:grid-cols-2 gap-4"></div>
      </div>

      <!-- Progress Bar -->
      <div class="h-1 bg-gray-800 rounded-full overflow-hidden">
        <div id="progress-bar" class="h-full bg-cosmic-500 transition-all duration-300" style="width: 0%"></div>
      </div>
    </div>
  </div>

  <!-- Results -->
  <div id="results" class="hidden">
    <div class="bg-gray-900 rounded-2xl p-8 shadow-xl text-center">
      <div class="max-w-md mx-auto">
        <!-- Rank Badge -->
        <div class="mb-8">
          <div id="rank-badge" class="inline-block"></div>
        </div>

        <!-- Score Summary -->
        <div class="grid grid-cols-2 gap-8 mb-8">
          <div>
            <div class="text-gray-400 mb-2">Final Score</div>
            <div class="text-3xl font-bold text-cosmic-400" id="final-score">0</div>
          </div>
          <div>
            <div class="text-gray-400 mb-2">Best Streak</div>
            <div class="text-3xl font-bold text-purple-400" id="final-streak">0</div>
          </div>
        </div>

        <!-- Achievements Earned -->
        <div id="achievements-earned" class="mb-8">
          <!-- Dynamically populated -->
        </div>

        <!-- Action Buttons -->
        <div class="flex justify-center gap-4">
          <button 
            id="play-again" 
            class="px-6 py-2 bg-cosmic-600 text-white rounded-lg hover:bg-cosmic-700 transition-colors"
          >
            Play Again
          </button>
          <button 
            id="share-score" 
            class="px-6 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors"
          >
            Share Score
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
.achievement-badge {
  opacity: 0.5;
  filter: grayscale(1);
  transition: all 0.3s ease;
}

.achievement-badge.unlocked {
  opacity: 1;
  filter: grayscale(0);
}

@keyframes streak-pulse {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.1); }
}

.streak-active {
  animation: streak-pulse 1s infinite;
}
</style>

<script>
// Import game logic
import { CosmicQuizGame } from './CosmicQuizGame';

// Initialize game when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  new CosmicQuizGame({
    ranks,
    powerups,
    achievements
  });
});
</script></boltArtifact>

<boltAction type="file" filePath="src/components/game/CosmicQuizGame.ts">// Game logic implementation
export class CosmicQuizGame {
  private config: any;
  private state: {
    currentQuestion: number;
    score: number;
    streak: number;
    bestStreak: number;
    powerups: { [key: string]: number };
    achievements: string[];
    gameMode: string | null;
    timer: number | null;
  };

  constructor(config: any) {
    this.config = config;
    this.state = {
      currentQuestion: 0,
      score: 0,
      streak: 0,
      bestStreak: 0,
      powerups: {},
      achievements: [],
      gameMode: null,
      timer: null
    };

    this.loadPlayerData();
    this.setupEventListeners();
  }

  private loadPlayerData() {
    const savedData = localStorage.getItem('cosmicQuizData');
    if (savedData) {
      const data = JSON.parse(savedData);
      document.getElementById('player-stats')?.classList.remove('hidden');
      this.updatePlayerStats(data);
    }
  }

  private savePlayerData() {
    const data = {
      totalScore: this.state.score,
      bestStreak: this.state.bestStreak,
      achievements: this.state.achievements,
      powerups: this.state.powerups
    };
    localStorage.setItem('cosmicQuizData', JSON.stringify(data));
  }

  private setupEventListeners() {
    // Setup all event listeners for the game
    document.querySelectorAll('.difficulty-select').forEach(button => {
      button.addEventListener('click', (e) => {
        const difficulty = (e.currentTarget as HTMLElement).dataset.difficulty;
        this.startGame(difficulty);
      });
    });

    // Add more event listeners for powerups, sharing, etc.
  }

  private startGame(difficulty: string) {
    this.state.gameMode = difficulty;
    this.showGameScreen();
    this.loadQuestion();
    this.startTimer();
  }

  private loadQuestion() {
    // Load question based on difficulty
    // Update UI
    // Handle answer selection
  }

  private handleAnswer(answer: number) {
    // Process answer
    // Update score and streak
    // Check for achievements
    // Move to next question or end game
  }

  private updateScore(points: number) {
    this.state.score += points;
    this.updateScoreDisplay();
    this.checkRankProgress();
  }

  private checkRankProgress() {
    // Update rank based on total score
  }

  private checkAchievements() {
    // Check and award achievements
  }

  private endGame() {
    // Show results
    // Save progress
    // Update leaderboard
  }

  // Add more game logic methods...
}